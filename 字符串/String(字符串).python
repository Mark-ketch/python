"""
什么是字符串：
字符串是以单引号或者双引号括起来的任意文本
"abc"
'dfr'
字符串不可变


"""
# 创建字符串
str1 = "sunck is a good man "
str2 = "sunck is a nice man "
str3 = "sunck is a handsome man "

"""
字符串运算
"""
# 字符串连接
str6 = "sunck is a"
str7 = "  good man"
str8 = str6 + str7
print("str6=", str6)
print("str7=", str7)
print("str8=", str8)

# 输出重复字符串
str9 = "good"
str10 = str9 * 3
print("str10=", str10)

# 访问字符串中的某一个字符
# 通过索引下标查找字符，索引从0开始
str11 = "s沈nck is a good man "
print(str11[1])
# str11[1]="a"
# print("str11=",str11)


# 截取字符串中的一部分
str13 = "sunck is a good man ! "
str15 = str13[6:15]
print("str15=", str15)
str16 = str13[:5]  # 从头截取到给定下标之前“0”可以省略
print("str16=", str16)
str17 = str13[16:]  # 从给定下标开始截取到结尾
print("str16=", str17)

str18 = "sunck is a good man ! "
print("good" in str18)
print("good1 " not in str18)

print(~5)  # -6
"""00000101 #5
11111010 #此为补码，求反码
10000110#其他位取反，最后位加1，求出来为上一码的源码
"""

# 格式化输出
print("sunck is a good man ")
num = 10
f = 10.1234567
print("num=", num)
print("num= %d, str18= %s,f= %.3f" % (num, str18, f))  # %.3f 表示精确到小数点后三位
# %d  %s %f 占位符
# %d占一个整数位    %s 占一个字符位     %f 占一个浮点数

print("num= %d\nstr18= %s\nf= %.3f" % (num, str18, f))
# \n 换行  只占一个字符（转义字符\）
# 转义字符 \  ----将一些字符转换成有特殊含义的字符
print("sunck \\\\n is")

#  \'
print('tom is a \'good\' man ')

#  \"
print("tom is a \"good\" man ")

# 如果字符串内有很多换行，用\n写在一行不好阅读
print("good\nnice\nhandsome")
print('''
good
nice
handsome
''')

# \t 制表符
print("sunck\tgood")

print(" \\\t\\ ")
print(r" \\\t\\ ")
# 如果字符串都需要转义，就需要加入好多\,
# 为了简化Python允许用r表示内部的字符串默认不转义


# eva1(str)
# 功能:将字符串str当成有效的表达式来求值并返回计算结果
num1 = eval("-123")
print(num1)
print(type(num1))
print(eval("777+123"))
# print(eval("a123"))


# len(str)
# 返回字符串的长度(字符个数)
print(len("sunck is a good man "))

# lower(str)转换成字符串大写字母为小写
str20 = "SUNCK iS a good Man "
print(str20.lower())
print("str20=%s" % (str20))
str21 = str20.lower()
print(str21)

# upper（） 转换字符串中小写字母为大写字母
str21 = "SUNCK iS a good Man "
print(str21.upper())

# swapcase() 大小写字符互相转换
str22 = "SUNCK iS a good Man"
print(str22.swapcase())

# capitalize() 大写首个单词的字母，其他小写
str23 = "SUNCK iS a good Man "
print(str23.capitalize())

# title() 大写每个单词的首字母
str24 = "SUNCK iS a good Man "
print(str24.title())

# character  char
# center(wideth.fillchar)
# 返回一个指定宽度的居中字符，fillchar为填充的字符串，默认是空格填充
str25 = "kaige is a good man"
print(str25.center(40))

# ljust(widthf[,fillchar])
# 返回一个指定宽度的左对齐字符串，fillchar为填充的字符串，默认是空格填充
str26 = "kaige is a good man"
print(str26.ljust(40))

# rjust(widthf[,fillchar])
# 返回一个指定宽度的右对齐字符串，fillchar为填充的字符串，默认是空格填充
str27 = "kaige is a good man"
print(str27.rjust(40, "$"))

# zfill(width)
# 返回一个长度为witdh的字符串，原字符串右对齐，前面补0
str28 = "kaige is a good man"
print(str28.zfill(40))

# count(str[,start][,end])
# 返回字符串中str出现的次数，可以指定范围，默认的是从头到尾
str29 = "kaige is a very very nice man"
print(str29.count("very", 0, len(str29)))

# find(str[,start][,end])
# 检测str字符串是否包含在字符串中，可以指定该范默认从头到尾，
# 得到的是第一次出现的开始下标,没有返回-1.
str30 = "kaige is a very very nice man"
print(str30.find("very"))
print(str30.find("good"))
print(str30.find("very", 15, len(str30)))

# rfind(str[,start][,end])
# 检测str字符串是否包含在字符串中，可以指定该范默认从头到尾，
# 得到的是第一次出现的开始下标,没有返回-1.
str30 = "kaige is a very very nice man"
print(str30.rfind("very"))
print(str30.rfind("good"))
print(str30.rfind("very", 15, len(str30)))

# index(str,start=0,end-len(str))
# 和find() 一样，只不过如果str不存在的时候就回报一个异常
str31 = "kaige is a very very nice man"
print(str31.index("very"))

# rindex(str,start=0,end-len(str))
# 和find() 一样，只不过如果str不存在的时候就回报一个异常
str32 = "kaige is a very very nice man"
print(str32.rindex("very"))

# lstrip()截掉字符串左侧指定字符，默认为空格
str33 = "***kaige is a very very nice man"
print(str33.lstrip("*"))

# rstrip()截掉字符串右侧指定字符，默认为空格
str34 = "kaige is a very very nice man            "
print(str34.rstrip(), "*")

# . strip 截掉字符串中de指定字符，默认为空格
str35 = "*****kaige is a very very nice man***"
print(str35.strip("*"))
# 视频23


# split(str="")  #print(str38.split("*"))
# 以str为分隔符截取字符串，指定num，则仅截取num个字符串
str38 = "sunck**is*****a**good**man**!"
list39 = str38.split("*")
print(list39)
c = 0
for s in list39:
    if len(s) > 0:
        c += 1

print(c)

# splitlines([keepends])   安装（’|r','|r|n' ,  '|n' )分隔符，返回
# keepds==True  会保留换行符

str40 = """
sunck is a good man!
sunck is a nice man!
sunck ia a handsome man!
"""
print(str40.splitlines(True))

# join()  以指定的字符串分隔符，将seq中的所有元素组合成一个字符串
list41 = ['sunck', 'is', 'a', 'good', 'man']
str42 = " ".join(list41)
print(str42)

# max()  min（）

str43 = "sunck is a good man !z"
print(max(str43))
print("*" + min(str43) + "*")

# replace(oidstr, newstr,count)
# 用newstr替换oldstr，默认全部替换。如果指定了count
# 那么只替换前count个
str44 = "sunck is a good  good man "
str45 = str44.replace("good", "nice", 1)
print(str44)
print(str45)

# 创建一个字符串映射表
print("*********")
#     要转换的字符串  目标字符串
t46 = str.maketrans("ac", "65")
# a--6  c--5
str47 = "sunck is a good  good man "
str48 = str47.translate(t46)
print(str48)


#strtswith(str.start=0,end=(str)
#在给定范围内判断是否是以给定的字符串开头，
# 如果没有指定范围，默认整个字符串
str49="sunck is a good man "
print(str49.startswith("sunck",5,16))

#endswith(str,start=0,end=len(str)
#在给定范围内判断是否是以给定的字符串开头，
# 如果没有指定范围，默认整个字符串
str50="sunck is a good man "
print(str50.endswith("man",5,20))


#编码
#encode(encoding="utf-8",errors="strict")
str51="sunck is a good man 凯哥 "
#ignore  : 忽略错误
data52=str51.encode("utf-8","ignore")
#print(str51.encode())
print(type(data52))

#解码   要与编码时的格式一致
str53=data52.decode("utf-8","ignore")
print(str53)



#isalpha()如果字符串中至少有一个字母且所有的字符都是字母返回true
# ，否则返回false
str54="sunck is a good man "
print(str54.isalpha())

#isalnum()
#如果字符串中至少有一个字符都是字母或数字返回true
str55="12a3"
print(str55.isalnum())

#isuppr()
#如果字符串中至少有一个英文字符且所有的字符都是大写的
# 英文字母返回true，否则返回false
print("ABC".isupper())
print("ABC1".isupper())
print("ABC#".isupper())
print("ABCx".isupper())

#islower()
#如果字符串中至少有一个英文字符且所有的字符都是小写的
# 英文字母返回true，否则返回false
print("abc".islower())
print("abc4".islower())
print("abcS".islower())

print("******istitle***")
#istitle
#如果字符串是标题化的返回true，否则返回false
print("Sunck".istitle())
print("Sunck is".istitle())
print("Sunck Is".istitle())

print("******isdigit***")
#isdigit()
#如果字符串只包含数字返回true，否则返回false
print("123".isdigit())
print("123a".isdigit())

#isnumeric()  如果字符串只包含数字字符返回true，否则返回false
print("123".isnumeric())
print("123a".isnumeric())

#字符串只包含十进制字符
print("123".isdecimal())
print("123z".isdecimal())
#
print(" ".isspace())
print(" ".isspace())
print("    ".isspace())
print("\t".isspace())
print("\r".isspace())
